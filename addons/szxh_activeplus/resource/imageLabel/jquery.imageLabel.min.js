"use strict";

function imageLabel(e) {

    // 规定插件使用的模板名称
    var domname = {
        // 处理图片
        img: ".imageLabel-img",
        // 图片处理区域
        body: ".imageLabel-img-body",
        // 图片实际操作区域
        jisuan: ".imageLabel-jisuan",
        // 每个划块class
        imgdrop: '.imageLabel-imgdrop',
        // 关闭按钮class
        closes: '.imageLabel-closes',
        // 每个划块数据属性名
        attr_json: 'data-json',
        // 划块dom存放位置
        content: '.imageLabel-content',
        // 右键菜单
        menu: '.imageLabel-drap-menu',
        // 弹出编辑层
        input: '.imageLabel-input',
        // 编辑层关闭按钮
        inputclose: '.imageLabel-input-close',
        // 编辑层保存按钮
        inputok: '.imageLabel-input-ok',
        box: '.imageLabel-box',
    };

    // 核心处理函数
    function main() {

        // 点击划块优化：处理已添加划块的叠放层级
        function autoLayer() {
            var drop = $(domname.imgdrop);

            // 记录每个划块面积
            var areas = [];

            // 第一次循环：记录面积
            drop.each(function(index, item) {
                var drop = $(item);
                var area = drop.width() * drop.height();
                areas.push(area);
            });

            // 第二次循环：处理层级
            drop.each(function(index, item) {
                var drop = $(item);
                var area = drop.width() * drop.height();
                var layer = 0; // 记录显示层级z-index

                // 面积小的更靠上
                $.each(areas, function(index2, item2) {
                    area <= item2 && layer++
                });
                drop.css({
                    "z-index": layer
                })
            })
        }

        // 显示优化：处理图片显示大小
        function a() {
            var img = $(domname.img);
            var jisuan = $(domname.jisuan);

            // 图片原始大小
            var img_width = img[0].naturalWidth;
            var img_height = img[0].naturalHeight;

            // 图片处理区域大小
            var body_width = img.parents(domname.box).parent().width();
            var body_height = img.parents(domname.box).parent().height();

            // 宽高比例
            var img_ratio = img_width / img_height;
            var body_ratio = body_width / body_height;

            // 兼容位置显示图片，图片宽高比例小则满宽显示，否则满高显示
            if(img_ratio < body_ratio) {
                jisuan.css({
                    height: "100%",
                    width: img_ratio * body_height
                });
            } else {
                jisuan.css({
                    width: "100%",
                    // 此时宽度大高度小
                    height: 1 / img_ratio * body_width
                });
            }
        }

        // 当前选中的划块dom。创建为新建dom；右键为选择当前dom
        var s;
            
        var t;
        var o, 
            d, 
            c, 
            g, 
            m, 
            r = $(domname.content);

        // 鼠标移动是否执行动作 按下为true，抬起为false
        var isAct = false;

        // 是否鼠标已锁定划块
        var isDrop = false;

        // 是否鼠标已锁定锚点，以锁定划块优先
        var isPoint = false;

        // 右键菜单dom
        var contextMenu = $(domname.menu);

        // 右键菜单优化：删除操作区域右键默认菜单
        $(domname.content)[0].oncontextmenu = function() {
            return false;
        };

        // 右键菜单优化：删除右键dom右键默认菜单
        contextMenu[0].oncontextmenu = function() {
            return false;
        };

        // 右键菜单优化：点击其他地方关闭右键菜单
        $("body").click(function(e) {
            contextMenu.hide();
        });

        // 初始化时加载划块
        $.each(config.data, function(index, item) {
            // 划块区域模板dom
            s = $('<div class="imageLabel-imgdrop"><span class="imageLabel-imgdrop-font">' + (item.name || "") + '</span><div class="imageLable-i-s"></div></div>');

            // 创建划块周围8个圆点
            for (var i = 0; i < 8; i++) {
                s.find(".imageLable-i-s").append('<i class="imageLable-i">');
            }

            // 如果显示遮罩，追加遮罩层
            if (config.shade) {
                for (var t = 0; t < 4; t++) {
                    s.append('<em class="imageLable-em">');
                }
            }

            // 设置划块初始位置，并附加划块数据信息
            var ex = item.ex;
            var ey = item.ey;
            var x  = item.x;
            var y  = item.y;

            s.css({
                left: 100 * (ex - x > 0 ? x : ex) + "%",
                top: 100 * (ey - y > 0 ? y : ey) + "%",
                width: 100 * Math.abs(ex - x) + "%",
                height: 100 * Math.abs(ey - y) + "%"
            }).attr(domname.attr_json, JSON.stringify(item));

            // 模板创建完毕，添加到页面中
            r.append(s)
        });

        // 修改叠放层级
        autoLayer();

        // 划块动作：创建划块、移动划块
        $(domname.content).mousedown(function(e) {

            // 如果不是右键，执行以下操作
            // 0左键 1滚轴 2右键
            if (e.button != 2) {

                // 隐藏右键菜单
                contextMenu.hide();

                isAct = true;

                // 当前点击划块
                var $this = $(this);

                // 获取划块位置信息
                t = {
                    x: $this.offset().left,
                    y: $this.offset().top,
                    cx: e.clientX,
                    cy: e.clientY,
                    w: $this.width(),
                    h: $this.height()
                };

                // 获取位置百分比
                o = {
                    x: (t.cx + document.documentElement.scrollLeft - t.x) / t.w,
                    y: (t.cy + document.documentElement.scrollTop - t.y) / t.h,
                    ex: 0,
                    ey: 0
                };

                // 选中的划块
                if ($(e.target).hasClass(domname.imgdrop.substr(1))) {
                    isDrop = true;
                    s = $(e.target);
                    c = JSON.parse(s.attr(domname.attr_json));
                    o = $.extend({}, c);
                    config.startArea();
                } 
                // 选中的锚点
                else if ($(e.target).hasClass("imageLable-i")) {
                    isPoint = true;
                    g = $(e.target);
                    s = $(e.target).parents(domname.imgdrop);
                    c = JSON.parse(s.attr(domname.attr_json));
                    o = $.extend({}, c);
                } 
                // 选中空白处，开始创建新划块
                else {
                    m = (new Date).getTime();
                    isDrop = false;
                    s = $('<div class="imageLabel-imgdrop"><span class="imageLabel-imgdrop-font"></span><div class="imageLable-i-s"></div></div>');
                    for (var a = 0; a < 8; a++) {
                        s.find(".imageLable-i-s").append('<i class="imageLable-i">');
                    }
                    if (config.shade) {
                        for (var i = 0; i < 4; i++) {
                            s.append('<em class="imageLable-em">');
                        }
                    }
                    s.addClass("imageLabel-drop-edit").appendTo(r);
                    s.siblings().removeClass("imageLabel-drop-edit");
                }

                // 变更样式
                s.addClass("imageLabel-drop-now");

                // 如果设置only=true，隐藏其他的划块
                config.only && $(this).find(domname.imgdrop).hide();

            } else {
                // 否则为右键点击，右键点击时弹出右键菜单
                if($(e.target).hasClass(domname.imgdrop.substr(1))) {
                    s = $(e.target);
                    var dis = {
                        left:( e.pageX || e.clientX) + document.body.scrollLeft - $(domname.content).offset().left,
                        top: (e.pageY || e.clientY) + document.body.scrollTop - $(domname.content).offset().top
                    };
                    setTimeout(function() { 
                        contextMenu.css(dis).show();
                    }, 0);
                }

            }
        });

        // 鼠标按下后拖拽动作处理逻辑
        $("body").mousemove(function(e) {
            if (isAct) {
                // 拖动划块
                if (isDrop) {
                    o.x  = c.x  + (e.clientX - t.cx) / t.w;
                    o.ex = c.ex + (e.clientX - t.cx) / t.w;
                    o.y  = c.y  + (e.clientY - t.cy) / t.h;
                    o.ey = c.ey + (e.clientY - t.cy) / t.h;
                }
                // 缩放划块
                else if (isPoint) {

                    // 确定点击的是第几个锚点，一共8个
                    var pointIndex = g.index();

                    // 根据点击的锚点做出动作
                    0 == pointIndex && (o.x  = c.x  + (e.clientX - t.cx) / t.w, o.y  = c.y  + (e.clientY - t.cy) / t.h);
                    1 == pointIndex && (o.ex = c.ex + (e.clientX - t.cx) / t.w, o.y  = c.y  + (e.clientY - t.cy) / t.h);
                    2 == pointIndex && (o.ex = c.ex + (e.clientX - t.cx) / t.w, o.ey = c.ey + (e.clientY - t.cy) / t.h);
                    3 == pointIndex && (o.x  = c.x  + (e.clientX - t.cx) / t.w, o.ey = c.ey + (e.clientY - t.cy) / t.h);
                    4 == pointIndex && (o.y  = c.y  + (e.clientY - t.cy) / t.h);
                    5 == pointIndex && (o.ex = c.ex + (e.clientX - t.cx) / t.w);
                    6 == pointIndex && (o.ey = c.ey + (e.clientY - t.cy) / t.h);
                    7 == pointIndex && (o.x  = c.x  + (e.clientX - t.cx) / t.w);

                } else {
                    o.ex = (e.clientX + document.documentElement.scrollLeft - t.x) / t.w;
                    o.ey = (e.clientY + document.documentElement.scrollTop - t.y) / t.h;
                }

                // 限制划块数据在0到百分之百之间
                o.y  < 0 && (o.y  = 0);
                o.x  < 0 && (o.x  = 0);
                o.ey < 0 && (o.ey = 0);
                o.ex < 0 && (o.ex = 0);
                o.ey > 1 && (o.ey = 1);
                o.ex > 1 && (o.ex = 1);
                o.y  > 1 && (o.y  = 1);
                o.x  > 1 && (o.x  = 1);

                // 改变划块位置及大小
                var img = $(domname.img);

                var pos = {
                    left: 100 * ((o.ex - o.x) > 0 ? o.x : o.ex) + "%",
                    top: 100 * ((o.ey - o.y) > 0 ? o.y : o.ey) + "%",
                    width: 100 * Math.abs(o.ex - o.x) + "%",
                    height: 100 * Math.abs(o.ey - o.y) + "%"
                };

                s.css(pos);
            }
        }).mouseup(function(e) {
            if (isAct) {

                // 保存划块信息到data-json
                var i = {};
                o.x < o.ex ? (i.x = o.x, i.ex = o.ex) : (i.x = o.ex, i.ex = o.x);
                o.y < o.ey ? (i.y = o.y, i.ey = o.ey) : (i.y = o.ey, i.ey = o.y);

                s.attr(domname.attr_json, JSON.stringify($.extend(o, i)));

                // 新建划块处理步骤
                if(!isDrop && !isPoint && Math.abs(e.clientX - t.cx) > 10 && Math.abs(e.clientY - t.cy) > 10) {
                    if(config.editPop) {
                        var edit_content = config.editContent(1, s.attr(domname.attr_json));
                        // 将当前设置的划块添加值************修改重要***************
                        $(domname.input).addClass("imageLabel-active").find("#imageLabel_layer").html(edit_content);
                        // 啥意思
                        setTimeout(function() {
                            $(domname.input).find("input").focus(); //[0].setSelectionRange(-1, -1);
                        }, 500);
                    }
                    // 修改后回调
                    config.edit(s);
                } else {
                    if(!isDrop && !isPoint) {
                        s.remove();
                    }
                }

                // 全部转为不可操作
                isAct = false;
                isDrop = false;
                isPoint = false;

                // 修改叠放次序
                autoLayer();

                // 恢复样式
                s.removeClass("imageLabel-drop-now");
            }

            // 如果设置了only=true，修改完后显示其他划块
            if(config.only) {
                $(this).find(".imageLabel-imgdrop").show();
            }
        });

        // 弹出层的大层
        var dom_input = $(domname.input);
        var u = dom_input.find("input");

        // 关闭弹出窗口
        dom_input.find(domname.inputclose).click(function() {
            dom_input.removeClass("imageLabel-active");
        });

        // 点击弹出窗口确定按钮
        dom_input.find(domname.inputok).click(function() {

            // 显示在页面中的数据
            var val = config.saveData(config.layerForm);

            // 将当前设置的划块添加值************修改重要***************
            s.find(".imageLabel-imgdrop-font").html(val);

            // 获取划块的json记录信息，修改值并覆盖原值
            var attr_json = JSON.parse(s.attr(domname.attr_json));

            attr_json.name = typeof val == 'string' ? val : val.prop('outerHTML');

            s.attr(domname.attr_json, JSON.stringify(attr_json));

            // 关闭弹出窗口
            dom_input.removeClass("imageLabel-active");

        });


        // 点击菜单选项执行动作
        
        // 删除图层
        $(".imageLabel-delete").click(function() {
            s.remove();
            contextMenu.hide();
        });

        // 修改图层
        $(".imageLabel-edit").click(function() {
            // 执行前回调
            config.edit(s);

            // 修改划块处理步骤
            s.addClass("imageLabel-drop-edit").siblings().removeClass("imageLabel-drop-edit");
            if(config.editPop) {
                var edit_content = config.editContent(2, s.attr(domname.attr_json));
                // 将当前设置的划块添加值************修改重要***************
                dom_input.addClass("imageLabel-active").find("#imageLabel_layer").html(edit_content);
                setTimeout(function() {
                    dom_input.find("input").focus(); //[0].setSelectionRange(-1, -1)
                }, 500);
            };
            contextMenu.hide();

        });
        // dom_input.keydown(function(e) {
        //     13 == e.keyCode && dom_input.find(domname.inputok).click()
        // });
        // $(window).keydown(function(e) {
        //     27 == e.keyCode && dom_input.hasClass("imageLabel-active") && dom_input.removeClass("imageLabel-active")
        // });
        a();
        $(window).resize(a);
        $('.imglabel-resetbox').click(function() {
            setTimeout(function() {
                a()
            }, 5);
        });
        $(".imageLabel-closes").click(function() {
            config.close(i.getData()) && (box_frame.removeClass("imageLabel-box-active"), setTimeout(function() {
                box_frame.remove()
            }, 500))
        }).next().click(function() {
            config.confirm(i.getData()) && box_frame.removeClass("imageLabel-box-active")
        })
    }

    // 判断图片地址有效性
    if (!e.img) {
        alert("请填写图片地址");
        return false;
    }

    // 默认配置
    var config = {
        // 选中单个区域是否隐藏其他区域，更加洁净
        only: false,
        // 是否显示遮罩
        shade: true,
        // 是否启用默认修改弹窗
        editPop: true,
        // 区域数据，默认渲染
        data: [],
        // 关闭按钮事件 return false 阻止默认关闭
        close: function() { return true; },
        // 确定按钮事件 return false 阻止默认关闭
        confirm: function() { return true; },
        edit: function() {},
        startArea: function() {},
        clickArea: function() {},

        layerContent: function() {
            return '<input type="text" value="" max="10" style="width:100%;padding:5px;">';
        },
        layerForm: null,
        saveData: function(e) {
            return $(domname.input).find("input").val();
        },
        // type 1添加  2编辑
        // data name
        editContent: function(type, data) {
            return config.layerContent;
        },
        // 获取数据时，每条数据可以处理一下
        getDataBefore: function(data) {
            return data;
        }
    };

    // 合并调用配置
    config = $.extend(config, e);

    // 初始化清空 imageLabel-box
    $(".imageLabel-box").remove();

    // 编辑区域模板
    var template = '\
    <div class="imageLabel-box">\
        <div class="imageLabel">\
            <div class="imageLabel-img-boxs">\
                <span class="imageLabel-img-body">\
                    <div class="imageLabel-loading-body">\
                        <div class="imageLabel-loading"></div>\
                    </div>\
                    <div class="imageLabel-jisuan" style="position: relative;overflow:hidden;">\
                        <!-- 图片原图 -->\
                        <img src="' + e.img + '" alt="" style="position: absolute;with:100%;height:100%;" class="imageLabel-img">\
                        <!-- 添加的划块 -->\
                        <div class="imageLabel-content">\n\
                        </div>\
                    </div>\
                </span>\
                <!-- 右键点击划块 -->\
                <ul class="imageLabel-drap-menu">\
                    <div style="overflow: hidden;">\
                        <div style="cursor: pointer;" class="imageLabel-delete btns">删除</div>\
                        <div style="cursor: pointer;" class="imageLabel-edit btns">编辑</div>\
                    </div>\
                    \x3c!--\n\
                    <li style="padding:10px;">\
                        <i></i>红色\
                    </li>\
                    <li style="padding:10px;">\
                        <i></i>红色\
                    </li>\
                    --\x3e\
                </ul>\
            </div>\
            <!-- 底部按钮 -->\
            <div class="imageLabel-buttons" style="display:none">\
                <div class="imageLabel-btn imageLabel-closes">关闭</div>\
                <div class="imageLabel-btn">确定</div>\
            </div>\
            <!-- 弹出编辑层 -->\
            <div class="imageLabel-input" style="background-color:rgba(255,255,255,0.3);">\
                <div class="imageLabel-input-box" style="width:250px;">\
                    <div style="background-color: #333;">\
                        <div style="color:#fff;overflow:hidden;line-height: 40px;">\
                            <span style="float: left;margin-left:20px;">编辑内容</span>\
                            <span class="imageLabel-input-close" style="float:right;margin-right:20px;cursor: pointer;">X</span>\
                        </div>\
                    </div>\n\
                    <div style="background: #fff;padding:20px;">\
                        <div id="imageLabel_layer"></div>\
                        <div style="margin-top:20px;overflow:hidden;">\
                            <div class="imageLabel-input-close imageLabel-btn" style="float: left;width:90px;background-color: #959595;">取消</div>\
                            <div class="imageLabel-input-ok imageLabel-btn" style="float: right;width:90px;">确定</div>\
                        </div>\
                    </div>\
                </div>\
            </div>\
        </div>\
    </div>\
    ';

    // 获取编辑区域
    var box_frame = $(template);

    // * 弹出层的内容由调用者决定
    var content = config.layerContent();
    box_frame.find('#imageLabel_layer').html(content);
    config.layerForm = box_frame.find('#imageLabel_layer');

    // 原图加载后出发一次
    box_frame.find(domname.img).one("load", function() {
        // 图上添加 .imageLabel-img-active 
        $(this).addClass("imageLabel-img-active");
        // 隐藏loading
        $(".imageLabel-loading-body").hide();
        // 执行核心处理函数
        main();
    });

    // 将编辑区域模板添加到页面最下方
    box_frame.appendTo("#ccc");

    // 加载完后显示编辑区域
    setTimeout(function() {
        box_frame.addClass("imageLabel-box-active")
    }, 0);


    // 向外抛出的调用方法
    var i = {
        // 获取所有划块操作数据
        getData: function() {
            var drop_datas = [];
            $(domname.imgdrop).each(function() {
                var item_data = JSON.parse($(this).attr(domname.attr_json));
                drop_datas.push(config.getDataBefore(item_data));
            });
            return drop_datas;
        },
        // 删除所有划块
        clearArea: function() {
            $(domname.imgdrop).remove()
        },
        // 点击关闭按钮
        close: function() {
            $(domname.closes).click()
        }
    };

    return i;
}

function input_type(e) {
    console.log(e.value);
    // 文字
    if(e.value == 1) {
        $('#input_text').html('<input type="text" value="" max="10" style="width:73%;padding:5px;">');
    } else if(e.value == 2) {
        $('#input_text').html('');
    }
}